{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["generations","neighborLogic","emptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","start","setStart","randomize","Math","random","startRef","useRef","current","sim","useCallback","c","produce","gridCopy","j","n","forEach","x","y","newI","newJ","setTimeout","className","onClick","visibility","id","style","display","gridTemplateColumns","map","col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6HAgBIA,E,sDAVEC,EAAgB,CACpB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,GAAI,IAIDC,EAAY,WAChBF,EAAc,EAEd,IADA,IAAMG,EAAO,GACJC,EAAI,EAAGA,EAlBF,GAkBeA,IAE3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAnBT,KAmByB,kBAAM,MAE7C,OAAOH,GAkLMK,EA/KH,WAAM,MAEQC,oBAAS,WAE/B,OAAOP,OAJO,mBAETQ,EAFS,KAEHC,EAFG,OAQUF,oBAAS,GARnB,mBAQTG,EARS,KAQFC,EARE,KAUVC,EAAY,WAEhB,IADA,IAAMX,EAAO,GACJC,EAAI,EAAGA,EArCJ,GAqCiBA,IAE3BD,EAAKE,KACHC,MAAMC,KAAKD,MAvCH,KAuCmB,kBAAOS,KAAKC,SAAW,GAAM,EAAI,MAGhEL,EAAQR,IAGJc,EAAWC,iBAAON,GACxBK,EAASE,QAAUP,EAKnB,IAqCMQ,EAAMC,uBAAY,WACjBJ,EAASE,UArCdR,GAAQ,SAACW,GAGP,OAFAtB,GAA4B,GAErBuB,YAAQD,GAAG,SAACE,GAEjB,IAF+B,IAAD,WAErBpB,GAEP,IAJ4B,eAInBqB,GAEP,IAAIC,EAAI,EAGRzB,EAAc0B,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KAE1BC,EAAO1B,EAAIwB,EACXG,EAAON,EAAII,EAEbC,GAAQ,GAAKA,EAtEf,IAsEiCC,GAAQ,GAAKA,EArE9C,KAsEAL,GAAKJ,EAAEQ,GAAMC,OAIbL,EAAI,GAAKA,EAAI,EACfF,EAASpB,GAAGqB,GAAK,EACI,IAAZH,EAAElB,GAAGqB,IAAkB,IAANC,IAC1BF,EAASpB,GAAGqB,GAAK,IAlBZA,EAAI,EAAGA,EA3DV,GA2DuBA,IAAM,EAA1BA,IAFFrB,EAAI,EAAGA,EA1DR,GA0DqBA,IAAM,EAA1BA,SAsCb4B,WAAWZ,EAAK,QACf,IAEH,OACE,6BAEE,4BACEa,UAAU,SACVC,QAAS,WACPrB,GAAUD,GACLA,IACHK,EAASE,SAAU,EACnBC,OANN,SAYA,4BACEe,YAAY,EACZF,UAAU,SACVC,QAAS,WACPrB,GAAUD,KAJd,QAUA,4BACEqB,UAAU,SACVC,QAAS,WACPpB,MAGD,YAEH,4BACEmB,UAAU,SACVC,QAAS,WACPpB,MAGD,YAEH,4BACEmB,UAAU,SACVC,QAAS,WACPpB,MAGD,YAEH,4BACEoB,QAAS,WACPvB,EAAQT,OAFZ,SAOA,6BACE,2BAAIF,IAGN,yBACEoC,GAAG,qBAEHC,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OAnKb,GAmKa,aAKpB7B,EAAK8B,KAAI,SAACrC,EAAMC,GAAP,OAERD,EAAKqC,KAAI,SAACC,EAAKhB,aClKLiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2884dbe2.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from \"immer\";\n\nconst numRows = 60;\nconst numCols = 60;\n\nconst neighborLogic = [\n  [0, 1],\n  [0, -1],\n  [1, 0],\n  [-1, 0],\n  [-1, 1],\n  [1, 1],\n  [-1, -1],\n  [1, -1],\n];\nvar generations;\n\nconst emptyGrid = () => {\n  generations = 0;\n  const rows = []; // Create rows\n  for (let i = 0; i < numRows; i++) {\n    // Use Array.from to create an array filled with 0's. Similar to [None] * Elements in Python\n    rows.push(Array.from(Array(numCols), () => 0)); //and create columns. Second parameter of Array.from is a mapping function that gets the value and the key and you can also return what the value is going to be\n  }\n  return rows;\n};\n\nconst App = () => {\n  // useState hook that is used for the grid itself\n  const [grid, setGrid] = useState(() => {\n    // Function only runs once state is initialized\n    return emptyGrid();\n  });\n  // console.log(grid);\n  // useState hook that controls the state of the start/stop button\n  const [start, setStart] = useState(false);\n\n  const randomize = () => {\n    const rows = []; // Create rows\n    for (let i = 0; i < numRows; i++) {\n      // Use Array.from to create an array filled with 0's. Similar to [None] * Elements in Python\n      rows.push(\n        Array.from(Array(numCols), () => (Math.random() > 0.5 ? 1 : 0))\n      ); //and create columns. Second parameter of Array.from is a mapping function that gets the value and the key and you can also return what the value is going to be\n    }\n    setGrid(rows);\n  };\n\n  const startRef = useRef(start);\n  startRef.current = start;\n\n  /*\n  Setgrid helper function\n  */\n  const gridSetter = () => {\n    setGrid((c) => {\n      generations = generations + 0.5;\n      // Use produce function again to manipulate a copy\n      return produce(c, (gridCopy) => {\n        // Iterate through all through rows and columns\n        for (let i = 0; i < numRows; i++) {\n          // and iterate through all columns\n          for (let j = 0; j < numCols; j++) {\n            // n is for neighbors\n            let n = 0;\n\n            // Check every sub array of the neighborLogic array\n            neighborLogic.forEach(([x, y]) => {\n              // Set new values for the sub array based on i and j location\n              const newI = i + x;\n              const newJ = j + y;\n              // Ensure that we don't go outside our 8 neighbors\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                n += c[newI][newJ];\n              }\n            });\n\n            if (n < 2 || n > 3) {\n              gridCopy[i][j] = 0;\n            } else if (c[i][j] === 0 && n === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n  };\n\n  /*\n  End setgrid helper function\n  */\n  const sim = useCallback(() => {\n    if (!startRef.current) {\n      return;\n    }\n\n    // C is the current grid\n    gridSetter();\n    setTimeout(sim, 1000);\n  }, []);\n\n  return (\n    <div>\n      {/* Start and stop button */}\n      <button\n        className=\"button\"\n        onClick={() => {\n          setStart(!start);\n          if (!start) {\n            startRef.current = true;\n            sim();\n          }\n        }}\n      >\n        Start\n      </button>\n      <button\n        visibility={false}\n        className=\"button\"\n        onClick={() => {\n          setStart(!start);\n        }}\n      >\n        Stop\n      </button>\n\n      <button\n        className=\"button\"\n        onClick={() => {\n          randomize();\n        }}\n      >\n        {\"Random 1\"}\n      </button>\n      <button\n        className=\"button\"\n        onClick={() => {\n          randomize();\n        }}\n      >\n        {\"Random 2\"}\n      </button>\n      <button\n        className=\"button\"\n        onClick={() => {\n          randomize();\n        }}\n      >\n        {\"Random 3\"}\n      </button>\n      <button\n        onClick={() => {\n          setGrid(emptyGrid());\n        }}\n      >\n        Clear\n      </button>\n      <div>\n        <p>{generations}</p>\n      </div>\n      {}\n      <div\n        id=\"readOnlyAfterStart\"\n        // Created a CSS grid to display or rows and columns\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, 12px)`,\n        }}\n      >\n        {/* Display the rows by using .map and getting the rows themselves and grabbing the index*/}\n\n        {grid.map((rows, i) =>\n          // And then calling the .map function on the rows object and getting the columns created and the index for each\n          rows.map((col, j) => (\n            // The div holds the unique index and styling based on whether or not the cell is dead or alive\n            <div\n              key={`${i}-${j}`}\n              // Allow interactivity with the user\n              onClick={() => {\n                const newGrid = produce(grid, (gridCopy) => {\n                  // Act as a toggle. If alive, die, if dead, come alive.\n                  gridCopy[i][j] = grid[i][j] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 10,\n                height: 10,\n                backgroundColor: grid[i][j] ? \"black\" : undefined,\n                border: \"solid 1px black\",\n              }}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\nconst pageLoaded = () => {};\n\npageLoaded();\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}